"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthCookie = void 0;
// PACKAGES
var cookiejar_1 = require("cookiejar");
/**
 * The cookie containing the tokens that are used to authenticate against Twitter.
 *
 * @internal
 */
var AuthCookie = /** @class */ (function () {
    /* eslint-enable */
    /**
     * Creates a new AuthCookie object from the given cookie string.
     *
     * @param cookieStr The cookie string list obtained from set-cookie header.
     */
    function AuthCookie(cookieStr) {
        /* eslint-disable */
        /** Token used to authenticate a device. */
        this.kdt = '';
        /** Token used to authenticate a user using a Twitter ID. */
        this.twid = '';
        /** The CSRF token of the session. */
        this.ct0 = '';
        /** The authentication token used while logging in to the account. */
        this.auth_token = '';
        // Storing the cookies in cookie jar
        var cookies = new cookiejar_1.CookieJar().setCookies(cookieStr);
        // Parsing the cookies
        for (var _i = 0, cookies_1 = cookies; _i < cookies_1.length; _i++) {
            var cookie = cookies_1[_i];
            if (cookie.name == 'kdt') {
                this.kdt = cookie.value;
            }
            else if (cookie.name == 'twid') {
                this.twid = cookie.value;
            }
            else if (cookie.name == 'ct0') {
                this.ct0 = cookie.value;
            }
            else if (cookie.name == 'auth_token') {
                this.auth_token = cookie.value;
            }
        }
    }
    /**
     * Converts 'this' object to it's string representation.
     */
    AuthCookie.prototype.toString = function () {
        /** The string representation of 'this' object. */
        var outStr = '';
        // Iterating through the (key, value) pairs of this cookie
        for (var _i = 0, _a = Object.entries(this); _i < _a.length; _i++) {
            var _b = _a[_i], key = _b[0], value = _b[1];
            outStr += "".concat(key, "=").concat(value, ";");
        }
        return outStr;
    };
    return AuthCookie;
}());
exports.AuthCookie = AuthCookie;
//# sourceMappingURL=AuthCookie.js.map