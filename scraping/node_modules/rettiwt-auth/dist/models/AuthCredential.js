"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthCredential = void 0;
// ENUMS
var Authentication_1 = require("../enums/Authentication");
// MODELS
var AuthCookie_1 = require("./AuthCookie");
var AuthHeader_1 = require("./AuthHeader");
/**
 * The credentials for authenticating against Twitter.
 *
 * Depending on which tokens are present, the authentication type is determined as follows:
 * - authToken, guestToken => Guest authentication.
 * - authToken, csrfToken, cookie => User authentication.
 * - authToken, guestToken, cookie => Guest authentication while logging in.
 *
 * @public
 */
var AuthCredential = /** @class */ (function () {
    /**
     * Generates a new AuthCredentials using the given credentials.
     *
     * @param cookies The list of cookie strings to be used for authenticating against Twitter.
     * @param guestToken The guest token to be used to authenticate a guest session.
     */
    function AuthCredential(cookies, guestToken) {
        this.authToken =
            'AAAAAAAAAAAAAAAAAAAAANRILgAAAAAAnNwIzUejRCOuH5E6I8xnZz4puTs%3D1Zv7ttfk8LF81IUq16cHjhLTvJu4FA33AGWWjCpTnA';
        // If guest credentials given
        if (!cookies && guestToken) {
            this.guestToken = guestToken;
            this.authenticationType = Authentication_1.EAuthenticationType.GUEST;
        }
        // If login credentials given
        else if (cookies && guestToken) {
            // Parsing the cookies
            var parsedCookie = new AuthCookie_1.AuthCookie(cookies);
            this.cookies = parsedCookie.toString();
            this.guestToken = guestToken;
            this.authenticationType = Authentication_1.EAuthenticationType.LOGIN;
        }
        // If user credentials given
        else if (cookies && !guestToken) {
            // Parsing the cookies
            var parsedCookie = new AuthCookie_1.AuthCookie(cookies);
            this.cookies = parsedCookie.toString();
            this.csrfToken = parsedCookie.ct0;
            this.authenticationType = Authentication_1.EAuthenticationType.USER;
        }
    }
    /**
     * @returns 'this' object's equivalent HTTP header representation.
     */
    AuthCredential.prototype.toHeader = function () {
        return new AuthHeader_1.AuthHeader(this);
    };
    return AuthCredential;
}());
exports.AuthCredential = AuthCredential;
//# sourceMappingURL=AuthCredential.js.map