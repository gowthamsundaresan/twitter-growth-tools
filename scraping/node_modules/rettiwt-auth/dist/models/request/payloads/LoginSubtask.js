"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoginSubtaskPayload = void 0;
// ENUMS
var Login_1 = require("../../../enums/Login");
// MODELS
var JsInstrumentation_1 = require("./subtasks/JsInstrumentation");
var UserIdentifier_1 = require("./subtasks/UserIdentifier");
var AlternateUserIdentifier_1 = require("./subtasks/AlternateUserIdentifier");
var Password_1 = require("./subtasks/Password");
var AccountDuplicationCheck_1 = require("./subtasks/AccountDuplicationCheck");
/**
 * The payload to be sent for each login subtask.
 *
 * @internal
 */
var LoginSubtaskPayload = /** @class */ (function () {
    /* eslint-enable */
    /**
     * @param subtaskId The id of the subtask to be executed.
     * @param flowToken The flow token for the subtask to be executed.
     * @param inputText The input string data to be sent in payload.
     */
    function LoginSubtaskPayload(subtaskId, flowToken, inputText) {
        this.flow_token = flowToken;
        this.subtask_inputs = [new LoginSubtaskInput(subtaskId, inputText)];
    }
    return LoginSubtaskPayload;
}());
exports.LoginSubtaskPayload = LoginSubtaskPayload;
/**
 * The subtask input according to the type of subtask to be executed.
 *
 * @internal
 */
var LoginSubtaskInput = /** @class */ (function () {
    /* eslint-enable */
    /**
     * @param subtaskId The id of the subtask to be executed.
     * @param inputText The input string data to be sent.
     */
    function LoginSubtaskInput(subtaskId, inputText) {
        this.subtask_id = subtaskId;
        // Initializing appropriate subtask input according to subtaskId
        if (subtaskId == Login_1.ELoginSubtasks.JS_INSTRUMENTATION) {
            this.js_instrumentation = new JsInstrumentation_1.JsInstrumentationInput();
        }
        else if (subtaskId == Login_1.ELoginSubtasks.ENTER_USER_IDENTIFIER && inputText) {
            this.settings_list = new UserIdentifier_1.UserIdentifierInput(inputText);
        }
        else if (subtaskId == Login_1.ELoginSubtasks.ENTER_ALTERNATE_USER_IDENTIFIER && inputText) {
            this.enter_text = new AlternateUserIdentifier_1.AlternateUserIdentifierInput(inputText);
        }
        else if (subtaskId == Login_1.ELoginSubtasks.ENTER_PASSWORD && inputText) {
            this.enter_password = new Password_1.PasswordInput(inputText);
        }
        else if (subtaskId == Login_1.ELoginSubtasks.ACCOUNT_DUPLICATION_CHECK) {
            this.check_logged_in_account = new AccountDuplicationCheck_1.AccountDuplicationCheckInput();
        }
    }
    return LoginSubtaskInput;
}());
//# sourceMappingURL=LoginSubtask.js.map