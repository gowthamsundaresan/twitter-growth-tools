import { ILoginSubtaskInput, ILoginSubtaskPayload } from '../../../types/request/payloads/LoginSubtask';
import { ELoginSubtasks } from '../../../enums/Login';
import { JsInstrumentationInput } from './subtasks/JsInstrumentation';
import { UserIdentifierInput } from './subtasks/UserIdentifier';
import { AlternateUserIdentifierInput } from './subtasks/AlternateUserIdentifier';
import { PasswordInput } from './subtasks/Password';
import { AccountDuplicationCheckInput } from './subtasks/AccountDuplicationCheck';
/**
 * The payload to be sent for each login subtask.
 *
 * @internal
 */
export declare class LoginSubtaskPayload implements ILoginSubtaskPayload {
    flow_token: string;
    subtask_inputs: LoginSubtaskInput[];
    /**
     * @param subtaskId The id of the subtask to be executed.
     * @param flowToken The flow token for the subtask to be executed.
     * @param inputText The input string data to be sent in payload.
     */
    constructor(subtaskId: ELoginSubtasks, flowToken: string, inputText?: string);
}
/**
 * The subtask input according to the type of subtask to be executed.
 *
 * @internal
 */
declare class LoginSubtaskInput implements ILoginSubtaskInput {
    subtask_id: string;
    js_instrumentation?: JsInstrumentationInput;
    settings_list?: UserIdentifierInput;
    enter_text?: AlternateUserIdentifierInput;
    enter_password?: PasswordInput;
    check_logged_in_account?: AccountDuplicationCheckInput;
    /**
     * @param subtaskId The id of the subtask to be executed.
     * @param inputText The input string data to be sent.
     */
    constructor(subtaskId: ELoginSubtasks, inputText?: string);
}
export {};
