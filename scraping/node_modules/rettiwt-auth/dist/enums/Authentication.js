"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EAuthenticationErrors = exports.EAuthenticationType = void 0;
/**
 * The different types of authentication for authenticating against Twitter.
 *
 * @public
 */
var EAuthenticationType;
(function (EAuthenticationType) {
    EAuthenticationType["GUEST"] = "GUEST";
    EAuthenticationType["USER"] = "USER";
    EAuthenticationType["LOGIN"] = "LOGIN";
})(EAuthenticationType = exports.EAuthenticationType || (exports.EAuthenticationType = {}));
/**
 * Different types of error messages related to authentication returned by services.
 *
 * @public
 */
var EAuthenticationErrors;
(function (EAuthenticationErrors) {
    EAuthenticationErrors["NOT_AUTHENTICATED"] = "Cannot fetch this data without authentication";
    EAuthenticationErrors["INVALID_EMAIL"] = "No Twitter account found for the given email address";
    EAuthenticationErrors["INVALID_USERNAME"] = "Incorrect username given for the given Twitter account";
    EAuthenticationErrors["INVALID_PASSWORD"] = "Incorrect password given for the given Twitter account";
    EAuthenticationErrors["AUTHENTICATION_FAILED"] = "Failed to authenticate using the given account Credentials";
})(EAuthenticationErrors = exports.EAuthenticationErrors || (exports.EAuthenticationErrors = {}));
//# sourceMappingURL=Authentication.js.map