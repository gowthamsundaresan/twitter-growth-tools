"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auth = void 0;
// PACKAGES
var axios_1 = __importDefault(require("axios"));
// ENUMS
var Login_1 = require("./enums/Login");
// MODELS
var AuthCredential_1 = require("./models/AuthCredential");
var LoginSubtask_1 = require("./models/request/payloads/LoginSubtask");
var Authentication_1 = require("./enums/Authentication");
/**
 * A class that deals with authenticating against Twitter API.
 *
 * @public
 */
var Auth = /** @class */ (function () {
    function Auth() {
        this.flowToken = '';
        this.cred = new AuthCredential_1.AuthCredential();
        this.subtasks = [
            Login_1.ELoginSubtasks.JS_INSTRUMENTATION,
            Login_1.ELoginSubtasks.ENTER_USER_IDENTIFIER,
            Login_1.ELoginSubtasks.ENTER_ALTERNATE_USER_IDENTIFIER,
            Login_1.ELoginSubtasks.ENTER_PASSWORD,
            Login_1.ELoginSubtasks.ACCOUNT_DUPLICATION_CHECK,
        ];
    }
    /**
     * Generates the apporpriate payload for the given login subtask and given data.
     *
     * @param subtask The name of the subtask.
     * @param flowToken The flow token for the subtask.
     * @param accCred The account credentials to the Twitter account.
     * @returns The requried payload.
     *
     * @internal
     */
    Auth.prototype.getSubtaskPayload = function (subtask, flowToken, accCred) {
        if (subtask == Login_1.ELoginSubtasks.ENTER_USER_IDENTIFIER) {
            return new LoginSubtask_1.LoginSubtaskPayload(subtask, flowToken, accCred.email);
        }
        else if (subtask == Login_1.ELoginSubtasks.ENTER_ALTERNATE_USER_IDENTIFIER) {
            return new LoginSubtask_1.LoginSubtaskPayload(subtask, flowToken, accCred.userName);
        }
        else if (subtask == Login_1.ELoginSubtasks.ENTER_PASSWORD) {
            return new LoginSubtask_1.LoginSubtaskPayload(subtask, flowToken, accCred.password);
        }
        else {
            return new LoginSubtask_1.LoginSubtaskPayload(subtask, flowToken);
        }
    };
    /**
     * Parses the incoming authentication error from Twitter API into a simplified message.
     *
     * @param error The incoming error.
     * @param flowName The flow that was executed, which raised this error.
     * @returns The simplified error message.
     *
     * @internal
     */
    Auth.prototype.parseAuthError = function (error, flowName) {
        var _a;
        /** The error message to throw. */
        var errorMessage = Authentication_1.EAuthenticationErrors.AUTHENTICATION_FAILED;
        // If there is any error related to login
        if (((_a = error.response) === null || _a === void 0 ? void 0 : _a.data.errors[0].code) == 399) {
            // If email error
            if (flowName == Login_1.ELoginSubtasks.ENTER_USER_IDENTIFIER) {
                errorMessage = Authentication_1.EAuthenticationErrors.INVALID_EMAIL;
            }
            // If username error
            else if (flowName == Login_1.ELoginSubtasks.ENTER_ALTERNATE_USER_IDENTIFIER) {
                errorMessage = Authentication_1.EAuthenticationErrors.INVALID_USERNAME;
            }
            // If password error
            else if (flowName == Login_1.ELoginSubtasks.ENTER_PASSWORD) {
                errorMessage = Authentication_1.EAuthenticationErrors.INVALID_PASSWORD;
            }
        }
        return errorMessage;
    };
    /**
     * Initiates the login process and gets the required flow token and cookies for the login process.
     *
     * @internal
     */
    Auth.prototype.initiateLogin = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, axios_1.default
                            .post(Login_1.ELoginUrls.INITIATE_LOGIN, null, {
                            headers: __assign({}, this.cred.toHeader()),
                        })
                            .then(function (res) {
                            // Setting the flow token
                            _this.flowToken = res.data.flow_token;
                            // Setting the cookie string of the auth credentials
                            _this.cred.cookies = res.headers['set-cookie'].join(';');
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Fetches a guest token, for guest authentication, from Twitter API.
     *
     * @returns The credentials containing the guest token.
     *
     * @public
     */
    Auth.prototype.getGuestCredential = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cred;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cred = new AuthCredential_1.AuthCredential();
                        // Getting the guest token
                        return [4 /*yield*/, axios_1.default
                                .post(Login_1.ELoginUrls.GUEST_TOKEN, null, {
                                headers: __assign({}, cred.toHeader()),
                            })
                                .then(function (res) {
                                cred.guestToken = res.data.guest_token;
                            })];
                    case 1:
                        // Getting the guest token
                        _a.sent();
                        return [2 /*return*/, cred];
                }
            });
        });
    };
    /**
     * Fetches the credentials for user authentication, from Twitter API.
     *
     * @param accCred The credentials (email, username and password) to the Twitter account.
     * @returns The credentials containing the authenticated tokens.
     *
     * @public
     */
    Auth.prototype.getUserCredential = function (accCred) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _loop_1, this_1, out_i_1, i;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        // Creating a new guest credential
                        _a = this;
                        return [4 /*yield*/, this.getGuestCredential()];
                    case 1:
                        // Creating a new guest credential
                        _a.cred = _b.sent();
                        // Initiating the login process
                        return [4 /*yield*/, this.initiateLogin()];
                    case 2:
                        // Initiating the login process
                        _b.sent();
                        _loop_1 = function (i) {
                            var payload;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        payload = this_1.getSubtaskPayload(this_1.subtasks[i], this_1.flowToken, accCred);
                                        // Executing the subtask
                                        return [4 /*yield*/, axios_1.default
                                                .post(Login_1.ELoginUrls.LOGIN_SUBTASK, payload, {
                                                headers: __assign({}, this_1.cred.toHeader()),
                                            })
                                                .then(function (res) {
                                                /**
                                                 * After the execution of ENTER_USER_IDENTIFIER subtask, two outcomes are possible:
                                                 *
                                                 * 1. Twitter API asks username, then asks for password
                                                 * 2. Twitter API directly asks for password, skipping username check
                                                 *
                                                 * Therefore, it is checked if Twitter API is asking for password after ENTER_USER_IDENTIFIER subtask.
                                                 *
                                                 * If yes, then the next subtask (ENTER_ALTERNATE_USER_IDENTIFIER) is skipped and ENTER_PASSWORD subtask is run directly.
                                                 */
                                                if (_this.subtasks[i] == Login_1.ELoginSubtasks.ENTER_USER_IDENTIFIER &&
                                                    res.data.subtasks.map(function (subtask) { return subtask.subtask_id; }).includes(Login_1.ELoginSubtasks.ENTER_PASSWORD)) {
                                                    i++;
                                                }
                                                // Getting the flow token required for next subtask
                                                _this.flowToken = res.data.flow_token;
                                                // If this is the last subtask, namely ACCOUNT_DUPLICATION_CHECK, setting the AuthCredentials
                                                if (_this.subtasks[i] == Login_1.ELoginSubtasks.ACCOUNT_DUPLICATION_CHECK) {
                                                    _this.cred = new AuthCredential_1.AuthCredential(res.headers['set-cookie']);
                                                }
                                            })
                                                /**
                                                 * Catching any error that might have arised in the authentication process.
                                                 *
                                                 * Then parsing that error to generate a simplified error message, which is then thrown.
                                                 */
                                                .catch(function (err) {
                                                throw new Error(_this.parseAuthError(err, _this.subtasks[i]));
                                            })];
                                    case 1:
                                        // Executing the subtask
                                        _c.sent();
                                        out_i_1 = i;
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        i = 0;
                        _b.label = 3;
                    case 3:
                        if (!(i < this.subtasks.length)) return [3 /*break*/, 6];
                        return [5 /*yield**/, _loop_1(i)];
                    case 4:
                        _b.sent();
                        i = out_i_1;
                        _b.label = 5;
                    case 5:
                        i++;
                        return [3 /*break*/, 3];
                    case 6: return [2 /*return*/, this.cred];
                }
            });
        });
    };
    return Auth;
}());
exports.Auth = Auth;
//# sourceMappingURL=Auth.js.map