"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TweetFilter = void 0;
// PACKAGE
var class_validator_1 = require("class-validator");
// MODELS
var DataValidationError_1 = require("../errors/DataValidationError");
/**
 * The filter to be used for fetching tweets from Twitter.
 *
 * @public
 */
var TweetFilter = exports.TweetFilter = /** @class */ (function () {
    /**
     * @param filter - The filter to use for searching tweets.
     */
    function TweetFilter(filter) {
        /** Whether to fetch tweets that are links or not.
         *
         * @defaultValue true
         */
        this.links = true;
        /** Whether to fetch tweets that are replies or not.
         *
         * @defaultValue true
         */
        this.replies = true;
        this.endDate = filter.endDate;
        this.fromUsers = filter.fromUsers;
        this.hashtags = filter.hashtags;
        this.links = filter.links;
        this.replies = filter.replies;
        this.mentions = filter.mentions;
        this.quoted = filter.quoted;
        this.sinceId = filter.sinceId;
        this.maxId = filter.maxId;
        this.startDate = filter.startDate;
        this.toUsers = filter.toUsers;
        this.words = filter.words;
        // Validating this object
        var validationResult = (0, class_validator_1.validateSync)(this);
        // If valiation error occured
        if (validationResult.length) {
            throw new DataValidationError_1.DataValidationError(validationResult);
        }
    }
    /**
     * Converts this object to it's string representation.
     *
     * @returns 'this' object's string representation.
     */
    TweetFilter.prototype.toString = function () {
        return ([
            this.words ? this.words.join(' ') : '',
            this.hashtags ? "(".concat(this.hashtags.map(function (hashtag) { return '#' + hashtag; }).join(' OR '), ")") : '',
            this.fromUsers ? "(".concat(this.fromUsers.map(function (user) { return "from:".concat(user); }).join(' OR '), ")") : '',
            this.toUsers ? "(".concat(this.toUsers.map(function (user) { return "to:".concat(user); }).join(' OR '), ")") : '',
            this.mentions ? "(".concat(this.mentions.map(function (mention) { return '@' + mention; }).join(' OR '), ")") : '',
            this.startDate ? "since:".concat(TweetFilter.dateToTwitterString(this.startDate)) : '',
            this.endDate ? "until:".concat(TweetFilter.dateToTwitterString(this.endDate)) : '',
            this.sinceId ? "since_id:".concat(this.sinceId) : '',
            this.maxId ? "max_id:".concat(this.maxId) : '',
            this.quoted ? "quoted_tweet_id:".concat(this.quoted) : '',
        ]
            .filter(function (item) { return item !== '()' && item !== ''; })
            .join(' ') +
            (this.links == false ? ' -filter:links' : '') +
            (this.replies == false ? ' -filter:replies' : ''));
    };
    /**
     * Convert Date object to Twitter string representation.
     * eg - 2023-06-23_11:21:06_UTC
     *
     * @param date - The date object to convert.
     * @returns The Twitter string representation of the date.
     */
    TweetFilter.dateToTwitterString = function (date) {
        // Converting localized date to UTC date
        var utc = new Date(Date.UTC(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds()));
        /**
         * To convert ISO 8601 date string to Twitter date string:
         *
         * - 'T' between date and time substring is replace with '_'.
         * - Milliseconds substring is omitted.
         * - '_UTC' is appended as suffix.
         */
        return utc.toISOString().replace(/T/, '_').replace(/\..+/, '') + '_UTC';
    };
    __decorate([
        (0, class_validator_1.IsArray)(),
        (0, class_validator_1.IsString)({ each: true }),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", Array)
    ], TweetFilter.prototype, "words", void 0);
    __decorate([
        (0, class_validator_1.IsArray)(),
        (0, class_validator_1.IsString)({ each: true }),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", Array)
    ], TweetFilter.prototype, "hashtags", void 0);
    __decorate([
        (0, class_validator_1.IsArray)(),
        (0, class_validator_1.IsString)({ each: true }),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", Array)
    ], TweetFilter.prototype, "fromUsers", void 0);
    __decorate([
        (0, class_validator_1.IsArray)(),
        (0, class_validator_1.IsString)({ each: true }),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", Array)
    ], TweetFilter.prototype, "toUsers", void 0);
    __decorate([
        (0, class_validator_1.IsArray)(),
        (0, class_validator_1.IsString)({ each: true }),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", Array)
    ], TweetFilter.prototype, "mentions", void 0);
    __decorate([
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.IsDate)(),
        __metadata("design:type", Date)
    ], TweetFilter.prototype, "startDate", void 0);
    __decorate([
        (0, class_validator_1.IsOptional)(),
        (0, class_validator_1.IsDate)(),
        __metadata("design:type", Date)
    ], TweetFilter.prototype, "endDate", void 0);
    __decorate([
        (0, class_validator_1.IsNumberString)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", String)
    ], TweetFilter.prototype, "sinceId", void 0);
    __decorate([
        (0, class_validator_1.IsNumberString)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", String)
    ], TweetFilter.prototype, "maxId", void 0);
    __decorate([
        (0, class_validator_1.IsNumberString)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", String)
    ], TweetFilter.prototype, "quoted", void 0);
    __decorate([
        (0, class_validator_1.IsBoolean)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", Boolean)
    ], TweetFilter.prototype, "links", void 0);
    __decorate([
        (0, class_validator_1.IsBoolean)(),
        (0, class_validator_1.IsOptional)(),
        __metadata("design:type", Boolean)
    ], TweetFilter.prototype, "replies", void 0);
    return TweetFilter;
}());
//# sourceMappingURL=TweetFilter.js.map