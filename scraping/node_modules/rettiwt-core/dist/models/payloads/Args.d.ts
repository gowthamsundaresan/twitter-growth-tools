import { EResourceType } from '../../enums/Resources';
import { IArgs } from '../../types/request/payloads/Args';
import { TweetFilter } from './TweetFilter';
/**
 * User set query paramters that are used to specify the data that is requested.
 *
 * @public
 */
export declare class Args implements IArgs {
    /**
     * The filter for filtering the data.
     *
     * @remarks
     * Required when resource type is {@link EResourceType.TWEET_SEARCH}
     */
    filter?: TweetFilter;
    /**
     * The 'id of the target resource.
     *
     * @remarks
     * - Required for all resources except {@link EResourceType.TWEET_SEARCH}.
     * - For {@link EResourceType.USER_DETAILS}, can be alphanumeric, while for others, is strictly numeric.
     */
    id?: string;
    /**
     * The number of data items to fetch.
     *
     * @remarks
     * - Works only for cursored resources.
     * - Must be \<= 20 for {@link EResourceType.TWEET_SEARCH} and {@link EResourceType.USER_TWEETS}.
     * - Must be \<= 100 for all other cursored resources.
     *
     * @defaultValue 20
     */
    count?: number;
    /**
     * The cursor string to the batch of data to fetch.
     *
     * @remarks
     * - May be used for cursored resources.
     * - Has no effect for all other resources.
     */
    cursor?: string;
    /**
     * The text for the tweet to be created.
     *
     * @remarks Length of the tweet must be \<= 280 characters.
     */
    tweetText?: string;
    /**
     * Initializes a new argument object based on the type of input.
     *
     * @param resourceType - The type of resource that is requested.
     * @param args - The additional user-defined arguments for fetching the resource.
     */
    constructor(resourceType: EResourceType, args: Args);
}
