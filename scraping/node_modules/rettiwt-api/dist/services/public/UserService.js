"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserService = void 0;
// PACKAGES
var rettiwt_core_1 = require("rettiwt-core");
// SERVICES
var FetcherService_1 = require("../internal/FetcherService");
/**
 * Handles fetching of data related to user account
 *
 * @public
 */
var UserService = /** @class */ (function (_super) {
    __extends(UserService, _super);
    /**
     * @param config - The config object for configuring the Rettiwt instance.
     *
     * @internal
     */
    function UserService(config) {
        return _super.call(this, config) || this;
    }
    /**
     * Get the details of a user.
     *
     * @param id - The username/id of the target user.
     * @returns The details of the given user.
     *
     * @public
     */
    UserService.prototype.details = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!isNaN(Number(id))) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.fetch(rettiwt_core_1.EResourceType.USER_DETAILS, { id: id })];
                    case 1:
                        // Fetching the requested data
                        data = _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this.fetch(rettiwt_core_1.EResourceType.USER_DETAILS_BY_ID, { id: id })];
                    case 3:
                        // Fetching the requested data
                        data = _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, data.list[0]];
                }
            });
        });
    };
    /**
     * Get the list of users who are followed by the given user.
     *
     * @param userId - The rest id of the target user.
     * @param count - The number of following to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of following to fetch.
     * @returns The list of users followed by the target user.
     *
     * @public
     */
    UserService.prototype.following = function (userId, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch(rettiwt_core_1.EResourceType.USER_FOLLOWING, {
                            id: userId,
                            count: count,
                            cursor: cursor,
                        })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the list followers of a given user.
     *
     * @param userId - The rest id of the target user.
     * @param count - The number of followers to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of followers to fetch.
     * @returns The list of users following the target user.
     *
     * @public
     */
    UserService.prototype.followers = function (userId, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch(rettiwt_core_1.EResourceType.USER_FOLLOWERS, {
                            id: userId,
                            count: count,
                            cursor: cursor,
                        })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the list of tweets liked by the given user.
     *
     * @param userId - The rest id of the target user.
     * @param count - The number of likes to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of likes to fetch.
     * @returns The list of tweets liked by the target user.
     *
     * @public
     */
    UserService.prototype.likes = function (userId, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch(rettiwt_core_1.EResourceType.USER_LIKES, {
                            id: userId,
                            count: count,
                            cursor: cursor,
                        })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the timeline of the given user.
     *
     * @param userId - The rest id of the target user.
     * @param count - The number of timeline items to fetch, must be \<= 20.
     * @param cursor - The cursor to the batch of timeline items to fetch.
     * @returns The timeline of the target user.
     *
     * @remarks If the target user has a pinned tweet, the returned timeline has one item extra and this is always the pinned tweet.
     *
     * @public
     */
    UserService.prototype.timeline = function (userId, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch(rettiwt_core_1.EResourceType.USER_TWEETS, {
                            id: userId,
                            count: count,
                            cursor: cursor,
                        })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the reply timeline of the given user.
     *
     * @param userId - The rest id of the target user.
     * @param count - The number of replies to fetch, must be \<= 20.
     * @param cursor - The cursor to the batch of replies to fetch.
     * @returns The reply timeline of the target user.
     *
     * @remarks If the target user has a pinned tweet, the returned reply timeline has one item extra and this is always the pinned tweet.
     *
     * @public
     */
    UserService.prototype.replies = function (userId, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch(rettiwt_core_1.EResourceType.USER_TWEETS_AND_REPLIES, {
                            id: userId,
                            count: count,
                            cursor: cursor,
                        })];
                    case 1:
                        data = _a.sent();
                        // Filtering out other tweets made by other users in the same threads
                        data.list = data.list.filter(function (tweet) { return tweet.tweetBy.id == userId; });
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return UserService;
}(FetcherService_1.FetcherService));
exports.UserService = UserService;
//# sourceMappingURL=UserService.js.map