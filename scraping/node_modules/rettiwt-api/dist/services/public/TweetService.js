"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TweetService = void 0;
// PACKAGES
var rettiwt_core_1 = require("rettiwt-core");
// SERVICES
var FetcherService_1 = require("../internal/FetcherService");
/**
 * Handles fetching of data related to tweets.
 *
 * @public
 */
var TweetService = /** @class */ (function (_super) {
    __extends(TweetService, _super);
    /**
     * @param config - The config object for configuring the Rettiwt instance.
     *
     * @internal
     */
    function TweetService(config) {
        return _super.call(this, config) || this;
    }
    /**
     * Get the details of a tweet.
     *
     * @param id - The id of the target tweet.
     * @returns The details of a single tweet with the given tweet id.
     *
     * @public
     */
    TweetService.prototype.details = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch(rettiwt_core_1.EResourceType.TWEET_DETAILS, { id: id })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data.list[0]];
                }
            });
        });
    };
    /**
     * Search for tweets using a query.
     *
     * @param query - The query be used for searching the tweets.
     * @param count - The number of tweets to fetch, must be \<= 20.
     * @param cursor - The cursor to the batch of tweets to fetch.
     * @returns The list of tweets that match the given filter.
     *
     * @public
     */
    TweetService.prototype.search = function (query, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch(rettiwt_core_1.EResourceType.TWEET_SEARCH, {
                            filter: query,
                            count: count,
                            cursor: cursor,
                        })];
                    case 1:
                        data = _a.sent();
                        // Sorting the tweets by date, from recent to oldest
                        data.list.sort(function (a, b) { return new Date(b.createdAt).valueOf() - new Date(a.createdAt).valueOf(); });
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the tweets from the tweet list with the given id.
     *
     * @param listId - The id of list from where the tweets are to be fetched.
     * @param count - The number of tweets to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of tweets to fetch.
     * @returns The list tweets present in the given list.
     *
     * @remarks Due a bug in Twitter API, the count is ignored when no cursor is provided and defaults to 100.
     */
    TweetService.prototype.list = function (listId, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch(rettiwt_core_1.EResourceType.LIST_TWEETS, {
                            id: listId,
                            count: count,
                            cursor: cursor,
                        })];
                    case 1:
                        data = _a.sent();
                        // Sorting the tweets by date, from recent to oldest
                        data.list.sort(function (a, b) { return new Date(b.createdAt).valueOf() - new Date(a.createdAt).valueOf(); });
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the list of users who liked a tweet.
     *
     * @param tweetId - The rest id of the target tweet.
     * @param count - The number of favoriters to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of favoriters to fetch.
     * @returns The list of users who liked the given tweet.
     *
     * @public
     */
    TweetService.prototype.favoriters = function (tweetId, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch(rettiwt_core_1.EResourceType.TWEET_FAVORITERS, {
                            id: tweetId,
                            count: count,
                            cursor: cursor,
                        })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Get the list of users who retweeted a tweet.
     *
     * @param tweetId - The rest id of the target tweet.
     * @param count - The number of retweeters to fetch, must be \<= 100.
     * @param cursor - The cursor to the batch of retweeters to fetch.
     * @returns The list of users who retweeted the given tweet.
     *
     * @public
     */
    TweetService.prototype.retweeters = function (tweetId, count, cursor) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fetch(rettiwt_core_1.EResourceType.TWEET_RETWEETERS, {
                            id: tweetId,
                            count: count,
                            cursor: cursor,
                        })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Post a tweet.
     *
     * @param tweetText - The text to be posted, length must be \<= 280 characters.
     * @returns Whether posting was successful or not.
     *
     * @public
     */
    TweetService.prototype.tweet = function (tweetText) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.post(rettiwt_core_1.EResourceType.CREATE_TWEET, { tweetText: tweetText })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Favorite the tweet with the given id.
     *
     * @param tweetId - The id of the tweet to be favorited.
     * @returns Whether favoriting was successful or not.
     *
     * @public
     */
    TweetService.prototype.favorite = function (tweetId) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.post(rettiwt_core_1.EResourceType.FAVORITE_TWEET, { id: tweetId })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    /**
     * Retweet the tweet with the given id.
     *
     * @param tweetId - The id of the tweet with the given id.
     * @returns Whether retweeting was successful or not.
     *
     * @public
     */
    TweetService.prototype.retweet = function (tweetId) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.post(rettiwt_core_1.EResourceType.CREATE_RETWEET, { id: tweetId })];
                    case 1:
                        data = _a.sent();
                        return [2 /*return*/, data];
                }
            });
        });
    };
    return TweetService;
}(FetcherService_1.FetcherService));
exports.TweetService = TweetService;
//# sourceMappingURL=TweetService.js.map