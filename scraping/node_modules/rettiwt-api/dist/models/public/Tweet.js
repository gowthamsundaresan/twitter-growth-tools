"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TweetMedia = exports.TweetEntities = exports.Tweet = void 0;
// PACKAGES
var rettiwt_core_1 = require("rettiwt-core");
// MODELS
var User_1 = require("./User");
// PARSERS
var JsonUtils_1 = require("../../helper/JsonUtils");
/**
 * The details of a single Tweet.
 *
 * @public
 */
var Tweet = /** @class */ (function () {
    /**
     * Initializes a new Tweet from the given raw tweet data.
     *
     * @param tweet - The raw tweet data.
     */
    function Tweet(tweet) {
        var _a, _b;
        this.id = tweet.rest_id;
        this.createdAt = tweet.legacy.created_at;
        this.tweetBy = new User_1.User(tweet.core.user_results.result);
        this.entities = new TweetEntities(tweet.legacy.entities);
        this.media = (_b = (_a = tweet.legacy.extended_entities) === null || _a === void 0 ? void 0 : _a.media) === null || _b === void 0 ? void 0 : _b.map(function (media) { return new TweetMedia(media); });
        this.quoted = tweet.legacy.quoted_status_id_str;
        this.fullText = (0, JsonUtils_1.normalizeText)(tweet.legacy.full_text);
        this.replyTo = tweet.legacy.in_reply_to_status_id_str;
        this.lang = tweet.legacy.lang;
        this.quoteCount = tweet.legacy.quote_count;
        this.replyCount = tweet.legacy.reply_count;
        this.retweetCount = tweet.legacy.retweet_count;
        this.likeCount = tweet.legacy.favorite_count;
        this.viewCount = parseInt(tweet.views.count);
        this.bookmarkCount = tweet.legacy.bookmark_count;
    }
    return Tweet;
}());
exports.Tweet = Tweet;
/**
 * The different types parsed entities like urls, media, mentions, hashtags, etc.
 *
 * @public
 */
var TweetEntities = /** @class */ (function () {
    /**
     * Initializes the TweetEntities from the raw tweet entities.
     *
     * @param entities - The raw tweet entities.
     */
    function TweetEntities(entities) {
        /** The list of hashtags mentioned in the tweet. */
        this.hashtags = [];
        /** The list of urls mentioned in the tweet. */
        this.urls = [];
        /** The list of IDs of users mentioned in the tweet. */
        this.mentionedUsers = [];
        // Extracting user mentions
        if (entities.user_mentions) {
            for (var _i = 0, _a = entities.user_mentions; _i < _a.length; _i++) {
                var user = _a[_i];
                this.mentionedUsers.push(user.screen_name);
            }
        }
        // Extracting urls
        if (entities.urls) {
            for (var _b = 0, _c = entities.urls; _b < _c.length; _b++) {
                var url = _c[_b];
                this.urls.push(url.expanded_url);
            }
        }
        // Extracting hashtags
        if (entities.hashtags) {
            for (var _d = 0, _e = entities.hashtags; _d < _e.length; _d++) {
                var hashtag = _e[_d];
                this.hashtags.push(hashtag.text);
            }
        }
    }
    return TweetEntities;
}());
exports.TweetEntities = TweetEntities;
/**
 * A single media content.
 *
 * @public
 */
var TweetMedia = /** @class */ (function () {
    /**
     * Initializes the TweetMedia from the raw tweet media.
     *
     * @param media - The raw tweet media.
     */
    function TweetMedia(media) {
        var _this = this;
        var _a, _b;
        /** The direct URL to the media. */
        this.url = '';
        this.type = media.type;
        // If the media is a photo
        if (media.type == rettiwt_core_1.EMediaType.PHOTO) {
            this.url = media.media_url_https;
        }
        // If the media is a gif
        else if (media.type == rettiwt_core_1.EMediaType.GIF) {
            this.url = (_a = media.video_info) === null || _a === void 0 ? void 0 : _a.variants[0].url;
        }
        // If the media is a video
        else {
            /** The highest bitrate of all variants. */
            var highestRate_1 = 0;
            /**
             * Selecting the URL of the video variant with the highest bitrate.
             */
            (_b = media.video_info) === null || _b === void 0 ? void 0 : _b.variants.forEach(function (variant) {
                if (variant.bitrate > highestRate_1) {
                    highestRate_1 = variant.bitrate;
                    _this.url = variant.url;
                }
            });
        }
    }
    return TweetMedia;
}());
exports.TweetMedia = TweetMedia;
//# sourceMappingURL=Tweet.js.map